#!/usr/bin/perl

our $FontSize1 = "24";
our $FontSize2 = "24";
our $FontSize3 = "32";

#
# Inherit from Graphics::Fig and add a few VNA-specific objects.
#
package VNAFig;
use parent 'Graphics::Fig';
use Carp;
use strict;
use warnings;

#
# min: find min of two numbers
#
sub min {
    my $a = shift;
    my $b = shift;

    return $a <= $b ? $a : $b;
}

#
# max: find max of two numbers
#
sub max {
    my $a = shift;
    my $b = shift;

    return $a >= $b ? $a : $b;
}

#
# resistor: draw a resistor
#   width: 4, height: 1
#   terminals: ( -2, 0 ), ( 2, 0 )
#
sub v_resistor {
    my $self = shift;

    #
    # Pull out object-specific parameters and begin the group.
    #
    my $rotation = 0;
    if (scalar(@_) > 0 && ref($_[$#_]) eq "HASH") {
	my $parameters = $_[$#_];
	if (exists($parameters->{rotation})) {
	    $rotation = $parameters->{rotation};
	    delete $parameters->{rotation};
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    $self->polyline([
            [ -2.000,  0 ],
	    [ -1.000,  0 ],
	    [ -0.875, -0.5 ],
	    [ -0.625,  0.5 ],
	    [ -0.375, -0.5 ],
	    [ -0.125,  0.5 ],
	    [  0.125, -0.5 ],
	    [  0.375,  0.5 ],
	    [  0.625, -0.5 ],
	    [  0.875,  0.5 ],
	    [  1.000,  0 ],
            [  2.000,  0 ]]);

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_ground: draw a ground symbol pointing down (lacking a stick)
#   width: 1, height: 2
#   terminal at (0, 0)
#
sub v_ground {
    my $self = shift;

    my $rotation = 0;
    if (scalar(@_) > 0 && ref($_[$#_]) eq "HASH") {
	my $parameters = $_[$#_];
	if (exists($parameters->{rotation})) {
	    $rotation = $parameters->{rotation};
	    delete $parameters->{rotation};
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    $self->polyline([[ -1.0,   0 ],
	    	     [  1.0,   0 ]]);
    $self->polyline([[ -0.5,   0.5 ],
    		     [  0.5,   0.5 ]]);
    $self->polyline([[ -0.125, 1.0 ],
    		     [  0.125, 1.0 ]]);

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_grounded_resistor: draw a resistor grounded on the right hand side
#   width: 5, height: 1
#   terminal: ( -2, 0 )
#
sub v_grounded_resistor {
    my $self = shift;

    my $rotation = 0;
    if (scalar(@_) > 0 && ref($_[$#_]) eq "HASH") {
	my $parameters = $_[$#_];
	if (exists($parameters->{rotation})) {
	    $rotation = $parameters->{rotation};
	    delete $parameters->{rotation};
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    $self->v_resistor();
    $self->v_ground({ position => [ 2, 0 ], rotation => 90 });

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# switch: draw a switch assembly
#   width: 1.2, height 1.2
#   connections at: ( 0, 0 ), ( -0.4, 1.2 ), ( +0.4, 1.2 )
#
sub v_switch {
    my $self = shift;

    my $rotation = 0;
    if (scalar(@_) > 0 && ref($_[$#_]) eq "HASH") {
	my $parameters = $_[$#_];
	if (exists($parameters->{rotation})) {
	    $rotation = $parameters->{rotation};
	    delete $parameters->{rotation};
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Draw switch dots
    #
    $self->circle({ center => [  0, 0 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [ -1, 2 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [  1, 2 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [ -3, 4 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [ -1, 4 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [  1, 4 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [  3, 4 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [ -2, 6 ],
	d => 0.4, areaFill => "black" });
    $self->circle({ center => [  2, 6 ],
	d => 0.4, areaFill => "black" });

    #
    # Draw switch arrows
    #
    $self->polyline([[  0, 0 ], [ -1, 2 ]],
	    { arrowMode => "forw", arrowStyle => "filled-indented" });
    $self->polyline([[ -2, 6 ], [ -1, 4 ]],
	    { arrowMode => "forw", arrowStyle => "filled-indented" });
    $self->polyline([[  2, 6 ], [  3, 4 ]],
	    { arrowMode => "forw", arrowStyle => "filled-indented" });

    #
    # Connect the switches
    #
    $self->polyline([[ -1, 2 ], [ -1, 4 ]]);
    $self->polyline([[  1, 2 ], [  1, 4 ]]);

    #
    # Draw the left grounded resistor
    #
    $self->v_grounded_resistor({ position => [ -3, 2 ], rotation => 90 });

    #
    # Draw the right grounded resistor
    #
    $self->v_grounded_resistor({ position => [  3, 2 ], rotation => 90 });

    #
    # Draw dotted line to bank the three switches
    #
    $self->polyline([[ -0.25, 0.5 ],
                     [ -0.25, 5.5 ]],
	    { lineStyle => "dotted",
	      styleVal  => ".025 inch" });
    $self->polyline([[ -1.75, 5.5 ],
                     [  2.25, 5.5 ]],
	    { lineStyle => "dotted",
	      styleVal  => ".025 inch" });

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# bridge: draw a directional bridge
#   width: 10, height: 6
#   connections are at:
#       (-5, -2), (+5, -2), (-5, +2), (+5, +2)
#
sub v_bridge {
    my $self = shift;
    
    #
    # Pull out object-specific parameters and begin the group.
    #
    my $rotation = 0;
    if (scalar(@_) > 0 && ref($_[$#_]) eq "HASH") {
	my $parameters = $_[$#_];
	if (exists($parameters->{rotation})) {
	    $rotation = $parameters->{rotation};
	    delete $parameters->{rotation};
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Find the current line thickness.
    #
    my $stack = $self->{stack};
    my $tos = ${$stack}[$#{$stack}];
    my $options = ${$tos}{"options"};

    my $lineThickness = $options->{lineThickness};	# in inches
    my $scale         = $options->{"units"}[0];
    if (!defined($lineThickness)) {
	$lineThickness = 1.0 / 80.0;
    }
    $lineThickness /= $scale;				# in current units

    #
    # Draw
    #
    $self->polyline([[ -5, -2 ], [ 5, -2 ]],
    		    { lineThickness => 2 * $lineThickness });
    $self->polyline([[ -5,  2 ], [ 5,  2 ]],
    		    { lineThickness => 2 * $lineThickness });
    $self->polyline([[ -4, -2 + $lineThickness ], [  4,  2 - $lineThickness ]],
		    { arrowMode => "both", arrowStyle => "filled-indented" });
    $self->polyline([[ -4,  2 - $lineThickness ], [  4, -2 + $lineThickness ]],
		    { arrowMode => "both", arrowStyle => "filled-indented" });
    $self->box([[ -5, -2 - &max($lineThickness, 1) ],
    		[  5,  2 + &max($lineThickness, 1) ]]);

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# rf_iv: draw RF-IV detector
#     v_out:  ( 0, 0)
#     i_out:  ( 4, 0)
#     rf_in:  (spacing, 0)
#     rf_out: (spacing, 5)
#
sub v_RFIV {
    my $self  = shift;

    my $rotation   = 0;
    my $spacing = 10;
    if (scalar(@_) > 0) {
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	    if (exists($parameters->{spacing})) {
		$spacing = $parameters->{spacing};
		delete $parameters->{spacing};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    $self->circle({ position => [  0,          5 ], r => 2 });
    $self->circle({ position => [ $spacing, 2 ], r => 2 });

    $self->text("V", {
	position => [  0,          5.5 ],
	textJustification => "center"
    });
    $self->text("I", {
	position => [ $spacing, 2.5 ],
	textJustification => "center"
    });

    $self->polyline([[  0, 0 ], [ 0, 3 ]]);
    $self->polyline([[  4,           0 ],
                     [  4,           2 ],
		     [ $spacing - 2, 2 ]]);
    $self->polyline([[  2,       5 ],
    		     [ $spacing, 5 ],
		     [ $spacing, 4 ]]);

    $self->v_ground({ position => [ -3, 5 ], rotation => -90 });
    $self->polyline([[ -3, 5 ], [ -2, 5 ]]);

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_line_break draw a line break symbol
#   width: 3, height 2
#   connections at: ( 0, 0 ), ( 0, 2 )
#
sub v_line_break {
    my $self = shift;

    my $rotation = 0;
    if (scalar(@_) > 0 && ref($_[$#_]) eq "HASH") {
	my $parameters = $_[$#_];
	if (exists($parameters->{rotation})) {
	    $rotation = $parameters->{rotation};
	    delete $parameters->{rotation};
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    $self->polyline([[  0,   0 ],
    		     [  0,   0.25 ],
                     [ -1.5, 0.75 ],
                     [  1.5, 1.25 ],
		     [  0,   1.75 ],
		     [  0,   2.00 ]]);

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_reference_plane: draw the reference plane
#
sub v_reference_plane {
    my $self  = shift;

    my $ports       = 1;
    my $rotation    = 0;
    my $portSpacing = 8;
    if (scalar(@_) > 0) {
	if (ref($_[0]) eq "") {
	    $ports = shift;
	}
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{ports})) {
		$ports = $parameters->{ports};
		delete $parameters->{ports};
	    }
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	    if (exists($parameters->{portSpacing})) {
		$portSpacing = $parameters->{portSpacing};
		delete $parameters->{portSpacing};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    if ($ports == 1) {
	$portSpacing = 0;
    }

    #
    # Draw the reference plain line.
    #
    $self->polyline([[ -3, 3 ], [ 3 + $portSpacing, 3 ]], {
	    lineStyle => "dashed" });

    #
    # Draw the reference plain text.
    #
    $self->text("reference", {
	    position => [ -3, 2 ],
	    textJustification => "right",
	    fontSize => $FontSize1 });
    $self->text("plane", {
	    position => [ -3, 3 ],
	    textJustification => "right",
	    fontSize => $FontSize1 });

    #
    # Draw the probe 1 line break, dot, label and wiring.
    #
    $self->v_line_break();
    $self->polyline([[ 0, 2 ], [ 0, 3 ]]);
    $self->circle({ center => [ 0, 3 ],
	d => 0.4, areaFill => "black" });
    $self->text($ports == 1 ? "Probe" : "Probe 1", {
	    position => [ 0, 5 ],
	    textJustification => "center" });

    #
    # If two ports, draw the probe 2 line break, dot label and wiring.
    #
    if ($ports > 1) {
	$self->v_line_break({ position => [ $portSpacing, 0 ] });
	$self->polyline([[ $portSpacing, 2 ], [ $portSpacing, 3 ]]);
	$self->circle({ center => [ $portSpacing, 3 ],
	    d => 0.4, areaFill => "black" });
	$self->text("Probe 2", {
		position => [ $portSpacing, 5 ],
		textJustification => "center" });
    }

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_vna: draw the VNA
#   width: 24, height 8  (2-port)
#   width: 16, height 8  (1-port)
#   connections at: ( -8, 0 ), ( 0, 0 ), ( +8, 0 )
#
sub v_vna {
    my $self  = shift;

    my $ports    = 1;
    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[0]) eq "") {
	    $ports = shift;
	}
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{ports})) {
		$ports = $parameters->{ports};
		delete $parameters->{ports};
	    }
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Handle ports parameter: positional or named.
    #
    if (scalar(@_) > 1 || ref($_[$#_]) ne "HASH") {
	$ports = shift;
    }
    if (ref($_[$#_]) eq "HASH") {
	my $options = $_[$#_];
	if (exists($options->{ports})) {
	    $ports = $options->{ports};
	    delete $options->{ports};
	}
    }

    $self->options({ textJustification => "center" });
    $self->circle({ d => 1.0, center => [ -8, 0 ] });
    $self->circle({ d => 1.0, center => [  0, 0 ] });

    $self->text("RF Out", { position => [ 0, -1 ] });

    if ($ports == 1) {
	$self->text("Detector", {
		position => [ -8, -1 ] });
	$self->text("VNA", {
		position => [ -4, -4 ],
		fontSize => $FontSize3 });
	$self->box([[ -12, -7 ], [ 4, 1 ]]);

    } else {
	$self->circle({ d => 1.0, center => [ 8, 0 ]});

	$self->text("Detector1", {
		position => [ -8, -1 ] });
	$self->text("Detector2", {
		position => [  8, -1 ] });
	$self->text("VNA", {
		position => [  0, -4 ],
		fontSize => $FontSize3 });
	$self->box([[ -12, -7 ], [ 12, 1 ]]);
    }

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# vna_with_rb: draw the VNA with single reflection v_bridge
#
sub v_vna_with_rb {
    my $self  = shift;

    my $ports    = 1;
    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[0]) eq "") {
	    $ports = shift;
	}
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{ports})) {
		$ports = $parameters->{ports};
		delete $parameters->{ports};
	    }
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Draw the VNA
    #
    $self->v_vna({
	    position => [ 12, 7 ],
	    ports => $ports });

    #
    # Draw the directional bridge.
    #
    $self->v_bridge({ position => [ 8, 16 ], rotation => -90 });

    #
    # Wire detector1 to the directional v_bridge.
    #
    $self->polyline([[ 4,  7 ],
    		     [ 4, 10 ],
		     [ 6, 10 ],
		     [ 6, 11 ]]);

    #
    # Wire RF out to the directional v_bridge.
    #
    $self->polyline([[ 12,  7 ],
    		     [ 12, 10 ],
		     [ 10, 10 ],
		     [ 10, 11 ]]);

    #
    # Draw the terminating resistor on the isolated port and wiring.
    #
    $self->v_grounded_resistor({ position => [ 3, 22 ], rotation => 180 });
    $self->polyline([[ 6, 21 ], [ 6, 22 ], [ 5, 22 ]]);

    #
    # Draw the reference plane.
    #
    $self->v_reference_plane({ position => [ 10, 23 ],
	    ports => $ports, portSpacing => 10 });

    #
    # Wire the v_bridge to the line break.
    #
    $self->polyline([[ 10, 21 ],
		     [ 10, 23 ]]);

    #
    # If two-port, wire the second port.
    #
    if ($ports > 1) {
	$self->polyline([[ 20,  7 ],
			 [ 20, 23 ]]);
    }

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_vna_with_s draw the VNA with s-parameter test set
#
sub v_vna_with_s {
    my $self  = shift;

    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Draw the VNA and wiring out.
    #
    $self->v_vna(2, { position => [ 14,  7 ] });
    $self->polyline([[  6, 7 ], [  6, 18 ]]);
    $self->polyline([[ 14, 7 ], [ 14, 10 ]]);
    $self->polyline([[ 22, 7 ], [ 22, 18 ]]);

    #
    # Draw switch and wiring out.
    #
    $self->v_switch({ position => [ 14, 10 ] });
    $self->text("sw0", {
	position          => [ 17, 15.5 ],
	textJustification => "left" });
    $self->polyline([[ 12, 16 ], [ 10, 16 ],
    		     [ 10, 18 ]]);
    $self->polyline([[ 16, 16 ], [ 18, 16 ],
    		     [ 18, 18 ]]);

    #
    # Draw the reflection bridges, terminating resistors on
    # isolated ports and wiring to line breaks.
    #
    $self->v_bridge({ position => [  8, 23 ], rotation => 90 });
    $self->v_bridge({ position => [ 20, 23 ], rotation => 90 });
    $self->v_grounded_resistor({ position => [  3, 30 ], rotation => 180 });
    $self->v_grounded_resistor({ position => [ 25, 30 ] });
    $self->polyline([[  6, 28 ], [  6, 30 ], [  5, 30 ]]);
    $self->polyline([[ 22, 28 ], [ 22, 30 ], [ 23, 30 ]]);
    $self->polyline([[ 10, 28 ], [ 10, 30 ]]);
    $self->polyline([[ 18, 28 ], [ 18, 30 ]]);

    #
    # Draw the reference plane.
    #
    $self->v_reference_plane({ position => [ 10, 30 ], ports => 2 });

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# vna_with_RFIV draw the VNA with RFIV
#
sub v_vna_with_RFIV {
    my $self  = shift;

    my $ports    = 1;
    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[0]) eq "") {
	    $ports = shift;
	}
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{ports})) {
		$ports = $parameters->{ports};
		delete $parameters->{ports};
	    }
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    if ($ports == 1) {
	#
	# Draw the VNA and wiring out.
	#
	$self->v_vna(2, { position => [ 14,  7 ] });
	$self->polyline([[  6, 7 ], [  6, 10 ]]);
	$self->polyline([[ 14, 7 ], [ 14, 16 ]], {
	    arrowMode  => "forw",
	    arrowStyle => "filled-indented"
	});
	$self->polyline([[ 22, 7 ], [ 22, 22 ]]);

	#
	# Draw switch.
	#
	$self->v_switch({ position => [ 6, 10 ] });
	$self->text("sw0", {
	    position          => [ 9, 15.5 ],
	    textJustification => "left" });

	#
	# Draw RFIV and wiring out.
	#
	$self->v_RFIV({ position => [ 4, 16 ] });
	$self->polyline([[ 14, 21 ], [ 14, 22 ]]);

	$self->v_reference_plane({ position => [ 14, 22 ], ports => 2 });

	$self->rotate($rotation);
	$self->translate($position);
	$self->end("group", { grid => 1 });

    } else {
	#
	# Draw the VNA and wiring out.
	#
	$self->v_vna(2, { position => [ 16,  7 ] });
	$self->polyline([[  8, 7 ], [  6,  7 ], [  6, 10 ]]);
	$self->polyline([[ 16, 7 ], [ 16, 10 ]]);
	$self->polyline([[ 24, 7 ], [ 26,  7 ], [ 26, 10 ]]);

	#
	# Draw switches and wiring out.
	#
	$self->v_switch({ position => [  6, 10 ] });
	$self->v_switch({ position => [ 16, 10 ] });
	$self->begin({ position => [ 26, 10 ] });
	$self->v_switch();
	$self->scale([-1, 1]);
	$self->end();
	$self->text("sw0", {
	    position          => [ 19, 15.5 ],
	    textJustification => "left" });
	$self->text("sw1", {
	    position          => [ 29, 15.5 ],
	    textJustification => "left" });
	$self->polyline([[  4, 16 ], [  4, 18 ]]);
	$self->polyline([[  8, 16 ], [  8, 18 ]]);
	$self->polyline([[ 14, 16 ], [ 12, 16 ], [ 12, 18 ]], {
	    arrowMode  => "forw",
	    arrowStyle => "filled-indented"
	});
	$self->polyline([[ 18, 16 ], [ 20, 16 ], [ 20, 18 ]], {
	    arrowMode  => "forw",
	    arrowStyle => "filled-indented"
	});
	$self->polyline([[ 24, 16 ], [ 24, 18 ]]);
	$self->polyline([[ 28, 16 ], [ 28, 18 ]]);

	#
	# Draw a dotted line connecting the two detector switches.
	#
	$self->polyline([[  8.25, 15.5 ],
			 [ 10.25, 17.0 ],
			 [ 21.75, 17.0 ],
			 [ 23.75, 15.5 ]], {
			 lineStyle => "dotted",
			 styleVal  => ".025 inch" });

	#
	# Draw RFIV's and wiring out.
	#
	$self->v_RFIV({ position => [ 4, 18 ], spacing => 8 });
	$self->polyline([[ 12, 23 ], [ 12, 24 ]]);

	$self->begin({ position => [ 28, 18 ] });
	$self->v_RFIV({ spacing => 8 });
	$self->scale([ -1, 1 ]);
	$self->end();
	$self->polyline([[ 20, 23 ], [ 20, 24 ]]);

	$self->v_reference_plane({ position => [ 12, 24 ], ports => 2 });

	$self->rotate($rotation);
	$self->translate($position);
	$self->end("group", { grid => 1 });
    }
}

#
# v_single_port_2x1
#
sub v_single_port_2x1 {
    my $self  = shift;

    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Draw the VNA and wiring out.
    #
    $self->v_vna({ position => [ 14, 7 ], ports => 1 });
    $self->polyline([[  6,  7 ], [  6, 10 ]]);
    $self->polyline([[ 14,  7 ], [ 14, 20 ]]);

    #
    # Draw the switch and wiring out.
    #
    $self->v_switch({ position => [ 6, 10 ] });
    $self->text("sw0", {
	position          => [ 9, 15.5 ],
	textJustification => "left" });
    $self->polyline([[  4, 16 ], [  4, 18 ], [ 10, 18 ], [ 10, 20 ]]);
    $self->polyline([[  8, 16 ], [ 22, 16 ], [ 22, 32 ]]);

    #
    # Draw reflection bridge, terminating resistor and wiring out.
    #
    $self->v_bridge({ position => [ 12, 25 ], rotation => 90 });
    $self->v_grounded_resistor({ position => [  7, 32 ], rotation => 180 });
    $self->polyline([[  9, 32 ], [ 10, 32 ], [ 10, 30 ]]);
    $self->polyline([[ 14, 30 ], [ 14, 32 ]]);

    #
    # Draw the reference plane.
    #
    $self->v_reference_plane({ position => [ 14, 32 ], ports => 2 });

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_single_port_1x2
#
sub v_single_port_1x2 {
    my $self  = shift;

    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Draw the VNA and wiring out.
    #
    $self->v_vna({ position => [ 14, 7 ], ports => 1 });
    $self->polyline([[  6,  7 ], [  6, 18 ]]);
    $self->polyline([[ 14,  7 ], [ 14, 10 ]]);

    #
    # Draw the switch and wiring out.
    #
    $self->v_switch({ position => [ 14, 10 ] });
    $self->text("sw0", {
	position          => [ 17, 15.5 ],
	textJustification => "left" });
    $self->polyline([[ 12, 16 ], [ 10, 16 ], [ 10, 18 ]]);
    $self->polyline([[ 16, 16 ], [ 18, 16 ], [ 18, 30 ]]);

    #
    # Draw reflection bridge, terminating resistor and wiring out.
    #
    $self->v_bridge({ position => [  8, 23 ], rotation => 90 });
    $self->v_grounded_resistor({ position => [ 3, 30 ], rotation => 180 });
    $self->polyline([[  5, 30 ], [  6, 30 ], [ 6, 28 ]]);
    $self->polyline([[ 10, 28 ], [ 10, 30 ]]);

    #
    # Draw the reference plane.
    #
    $self->v_reference_plane({ position => [ 10, 30 ], ports => 2 });

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# v_vna_with_reference_switches
#
sub v_vna_with_reference_switches {
    my $self  = shift;

    my $rotation = 0;
    if (scalar(@_) > 0) {
	if (ref($_[$#_]) eq "HASH") {
	    my $parameters = $_[$#_];
	    if (exists($parameters->{rotation})) {
		$rotation = $parameters->{rotation};
		delete $parameters->{rotation};
	    }
	}
    }
    $self->begin(@_);
    my $position = $self->getposition();
    $self->moveto([ 0, 0 ]);

    #
    # Draw the VNA and wiring out.
    #
    $self->v_vna(2, { position => [ 16,  7 ] });
    $self->polyline([[  8, 7 ], [  6,  7 ], [  6, 10 ]]);
    $self->polyline([[ 16, 7 ], [ 16, 10 ]]);
    $self->polyline([[ 24, 7 ], [ 26,  7 ], [ 26, 10 ]]);

    #
    # Draw switches and wiring out.
    #
    $self->begin({ position => [  6, 10 ] });
    $self->v_switch();
    $self->scale([-1, 1]);
    $self->end();
    $self->v_switch({ position => [ 16, 10 ] });
    $self->v_switch({ position => [ 26, 10 ] });
    $self->text("sw0", {
	position          => [ 19, 15.5 ],
	textJustification => "left" });
    $self->text("sw1", {
	position          => [ 29, 15.5 ],
	textJustification => "left" });
    $self->polyline([[  4, 16 ], [  4, 30 ], [  8, 30 ], [  8, 28 ]]);
    $self->polyline([[  8, 16 ], [  8, 18 ]]);
    $self->polyline([[ 14, 16 ], [ 12, 16 ], [ 12, 18 ]]);
    $self->polyline([[ 18, 16 ], [ 20, 16 ], [ 20, 18 ]]);
    $self->polyline([[ 24, 16 ], [ 24, 18 ]]);
    $self->polyline([[ 28, 16 ], [ 28, 30 ], [ 24, 30 ], [ 24, 28 ]]);

    #
    # Draw a dotted line connecting the two detector switches.
    #
    $self->polyline([[  7.75, 15.5 ],
		     [  9.75, 17.0 ],
		     [ 22.25, 17.0 ],
		     [ 24.25, 15.5 ]], {
		     lineStyle => "dotted",
		     styleVal  => ".025 inch" });

    #
    # Draw bridges and and wiring out.
    #
    $self->v_bridge({ position => [ 10, 23 ], rotation => 90 });
    $self->v_bridge({ position => [ 22, 23 ], rotation => 90 });
    $self->polyline([[ 12, 28 ], [ 12, 30 ]]);
    $self->polyline([[ 20, 28 ], [ 20, 30 ]]);

    $self->v_reference_plane({ position => [ 12, 30 ], ports => 2 });

    $self->rotate($rotation);
    $self->translate($position);
    $self->end("group", { grid => 1 });
}

#
# main
#
package main;

my $fig = VNAFig->new({ units => "0.1 inch", lineThickness => "2pt",
			fontSize => $FontSize2 });

my $SCALE = 2.0;

$fig->begin();
$fig->v_vna_with_rb(1);
#$fig->save("s_RB_1x1.fig);
$fig->scale($SCALE);
$fig->export("s_RB_1x1.svg");
$fig->end("discard");

$fig->begin();
$fig->v_vna_with_rb(2);
#$fig->save("d_RB_1x1.fig);
$fig->scale($SCALE);
$fig->export("d_RB_2x1.svg");
$fig->end("discard");

$fig->begin();
$fig->v_vna_with_s();
$fig->scale($SCALE);
#$fig->save("d_S_2x2.fig");
$fig->export("d_S_2x2.svg");
$fig->end("discard");

$fig->begin();
$fig->v_vna_with_RFIV(1);
$fig->scale($SCALE);
#$fig->save("d_RFIV_2x1.fig");
$fig->export("d_RFIV_2x1.svg");
$fig->end("discard");

$fig->begin();
$fig->v_vna_with_RFIV(2);
$fig->scale($SCALE);
#$fig->save("d_RFIV_2x2.fig");
$fig->export("d_RFIV_2x2.svg");
$fig->end("discard");

$fig->begin();
$fig->v_single_port_2x1();
$fig->scale($SCALE);
#$fig->save("s_RB_2x1.fig");
$fig->export("s_RB_2x1.svg");
$fig->end("discard");

$fig->begin();
$fig->v_single_port_1x2();
$fig->scale($SCALE);
#$fig->save("s_RB_1x2.fig");
$fig->export("s_RB_1x2.svg");
$fig->end("discard");

$fig->begin();
$fig->v_vna_with_reference_switches();
$fig->scale($SCALE);
#$fig->save("d_RB_ref_2x2.fig");
$fig->export("s_RB_ref_2x2.svg");
$fig->end("discard");
